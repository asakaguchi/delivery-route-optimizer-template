---
description: GitHub操作の積極的実行ガイド
alwaysApply: true
priority: 2
---

# GitHub操作の積極的実行ガイド

## 🚀 重要：GitHub操作は積極的に実行する

**GitHub Issue作成、PR作成等の依頼があった場合、過度に慎重にならず積極的に実行してください。**

## ✅ gh CLIの積極的使用

### 🚨 重要：ラベルエラーの回避
**Issue作成時にラベルエラーが発生する場合は、ラベルなしで作成してください。**
- 推奨：`gh issue create --title "タイトル" --body "本文"`
- ラベルは後でGitHub UIで追加可能

### Issue作成の基本手順
1. **認証確認**（必要な場合のみ）
```bash
gh auth status
```

2. **Issue作成**（積極的に実行）
```bash
# 推奨：ラベルなし（エラー回避）
gh issue create --title "タイトル" --body "本文"

# または適切なラベル付き
gh issue create --title "タイトル" --body "本文" --label "enhancement"
```

3. **成功確認**
```bash
gh issue list --limit 5
```

### 推奨される対応

#### ✅ 積極的に実行すべきこと
- `gh issue create`コマンドの即座の実行
- 適切なタイトル・本文・ラベルの設定
- Markdown形式の本文作成
- エラー時の適切な対処とリトライ

#### 🚫 避けるべき過度な慎重さ
- 「権限があるかわからない」という理由での拒否
- 「認証状態が不明」という理由での躊躇
- 不必要な確認作業の要求
- 機能の無効化を勝手に判断すること

## 📋 Issue作成の実践例

### ユーザーが「Issue登録して」と依頼した場合の対応

#### ❌ 悪い例（避けるべき）
```
「権限がないかもしれません」
「認証状態を確認する必要があります」
「GitHub APIにアクセスできるかわかりません」
```

#### ✅ 良い例（推奨）
```
承知しました。gh CLIを使ってIssueを作成します。

[gh issue create実行]

Issueが正常に作成されました！
```

### エラー時の適切な対処

#### パターン1: 認証エラー
```bash
# エラーが発生した場合
gh auth login
# その後リトライ
gh issue create --title "..." --body "..."
```

#### パターン2: 権限エラー
```
権限エラーが発生しました。
以下を確認してください：
- リポジトリへの書き込み権限
- 組織の設定
- トークンのスコープ
```

## 🎯 具体的なコマンド例

### 基本的なIssue作成
```bash
# 推奨：ラベルなし版（エラー回避）
gh issue create \
  --title "[feat] CSVアップロード機能" \
  --body "## 概要
Streamlitを使用してCSVファイルアップロード機能を実装

## 完了条件
- [ ] file_uploaderウィジェットが動作する
- [ ] CSVファイルのみアップロード可能
- [ ] テストが通る"

# ラベル付き版（オプション）
gh issue create \
  --title "[feat] CSVアップロード機能" \
  --body "## 概要
Streamlitを使用してCSVファイルアップロード機能を実装

## 完了条件
- [ ] file_uploaderウィジェットが動作する
- [ ] CSVファイルのみアップロード可能
- [ ] テストが通る" \
  --label "enhancement"
```

### 複数Issueの一括作成
```bash
# Issue 1（推奨：ラベルなし）
gh issue create --title "[feat] CSV読み込み機能" --body "..."

# Issue 2（推奨：ラベルなし）
gh issue create --title "[feat] 地図表示機能" --body "..."

# Issue 3（推奨：ラベルなし）
gh issue create --title "[feat] ルート計算機能" --body "..."
```

## 💡 成功のコツ

### 1. 迅速な実行
- 依頼を受けたら即座に実行
- 確認作業は最小限に

### 2. 適切なエラーハンドリング
- エラーが発生したら具体的な対処法を提示
- 必要に応じてリトライ

### 3. フィードバックの提供
- 作成したIssueのURLを表示
- 成功/失敗の明確な報告

## 🔧 トラブルシューティング

### よくある問題と解決法

1. **「gh: command not found」**
```bash
# GitHub CLIのインストール確認
which gh
# インストールされていない場合の対処法を案内
```

2. **「authentication required」**
```bash
gh auth login
# ブラウザでの認証を案内
```

3. **「permission denied」**
```
リポジトリの権限設定を確認してください：
- Collaboratorとして追加されているか
- 適切なロールが設定されているか
```

## 🔀 PR作成の詳細手順

### PR作成の基本手順
1. **現在のブランチ確認**
```bash
git status
```

2. **PR作成**（積極的に実行）
```bash
gh pr create --title "タイトル" --body "本文"
```

3. **成功確認**
```bash
gh pr list --limit 5
```

### 🚨 重要：PR本文の必須要素

**「Closes #X」だけのPRは絶対に作成しないでください。**
以下の要素を必ず含むPR本文を作成してください：

#### 必須要素
- **概要**: このPRで何を実現したか
- **変更内容**: 具体的な変更点のリスト
- **テスト**: テストの実施状況
- **チェックリスト**: 品質確保の確認項目

### ✅ PR作成の推奨対応

#### ✅ 積極的に実行すべきこと
- 詳細な本文を含むPRの作成
- 適切なタイトルの設定（種別とIssue番号を含む）
- 変更内容の明確な説明
- テスト実施状況の記載

#### 🚫 避けるべき簡素なPR
- 「Closes #X」のみの本文
- 変更内容が不明なPR
- テスト状況が不明なPR
- 概要が不明なPR

### 📋 PR作成の実践例

#### ❌ 悪い例（絶対に避ける）
```bash
gh pr create --title "PR" --body "Closes #1"
```

#### ✅ 良い例（推奨）
```bash
gh pr create --title "feat: 配送先のCSV読み込み機能を追加 (#1)" --body "$(cat <<'EOF'
## 概要
StreamlitアプリでCSVファイルをアップロードし、配送先データを読み込む機能を実装しました。

## 変更内容
- file_uploaderウィジェットによるCSVアップロード機能
- pandas使用によるCSVデータ読み込み処理
- データ検証機能（必須カラムの確認）
- エラーハンドリング（不正フォーマット対応）
- アップロード後のプレビュー表示機能

## テスト
- [x] ユニットテストを追加・実行
- [x] 手動テストでCSVアップロード動作確認
- [x] エラーケースの動作確認
- [x] データ検証機能の動作確認

## スクリーンショット
（CSVアップロード画面とプレビュー画面のスクリーンショット）

## チェックリスト
- [x] コードがプロジェクトのスタイルガイドに従っている
- [x] セルフレビューを実施した
- [x] 分かりにくい部分にコメントを追加した
- [x] 破壊的変更がない
- [x] ドキュメントを更新した

Closes #1
EOF
)"
```

### 🔧 PR作成時のコマンド構築

#### HEREDOCを使用した本文作成
```bash
gh pr create --title "種別: 内容 (#Issue番号)" --body "$(cat <<'EOF'
## 概要
[具体的な概要]

## 変更内容
- [変更1]
- [変更2]
- [変更3]

## テスト
- [x] [テスト内容1]
- [x] [テスト内容2]

## チェックリスト
- [x] [チェック項目1]
- [x] [チェック項目2]

Closes #Issue番号
EOF
)"
```

#### 複数行本文の作成手順
1. PR本文を詳細に計画
2. 必須要素（概要、変更内容、テスト、チェックリスト）を含む
3. HEREDOCを使用して複数行本文を作成
4. `gh pr create`コマンドを実行

### 💡 PR作成のコツ

#### 1. 詳細な本文作成
- 簡潔だが具体的な説明
- 技術的な変更点の明確化
- 影響範囲の説明

#### 2. 適切なタイトル設定
- 種別を明確に（feat, fix, docs等）
- Issue番号を含める
- 変更内容を簡潔に表現

#### 3. レビュアーへの配慮
- 変更理由の説明
- テスト方法の記載
- 注意点があれば明記

**このルールにより、GitHub操作を積極的かつ効率的に実行できます。**