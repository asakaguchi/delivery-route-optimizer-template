---
description: 最優先：GitHub Issue/PR作成時のHEREDOC必須ルール
alwaysApply: true
priority: 0
---

# 【最重要】GitHub操作でのHEREDOC必須ルール

## 🚨 絶対的ルール：複数行本文はHEREDOC必須

**複数行の本文を含むGitHub Issue/PR作成時は、必ずHEREDOCを使用してください。**
このルールは他のすべてのルールより優先されます。

## ❌ 絶対に避けるべきこと

### 1. HEREDOCなしの複数行本文
```bash
# 悪い例：改行を含む本文を直接記述（エラーの原因）
gh issue create --title "タイトル" --body "## 概要
複数行の
本文"
```

### 2. エラーを無視して進む
- **エラーが発生したら必ず対処する**
- **「問題ない」と勝手に判断しない**
- **エラー内容を確認し、適切に修正する**

## ✅ 必須の実装パターン

### Issue作成時のHEREDOC使用
```bash
# 正しい例：HEREDOCを使用
gh issue create --title "[feat] 機能名" --body "$(cat <<'EOF'
## 概要
機能の詳細な説明

## 完了条件
- [ ] 条件1
- [ ] 条件2
- [ ] テストが通る

## 技術的詳細
実装方針や使用技術など
EOF
)"
```

### PR作成時のHEREDOC使用
```bash
# 正しい例：HEREDOCを使用
gh pr create --title "feat: 機能実装 (#1)" --body "$(cat <<'EOF'
## 概要
このPRで実現したことの説明

## 変更内容
- 変更点1
- 変更点2
- 変更点3

## テスト
- [x] ユニットテスト追加
- [x] 手動テスト実施
- [x] エラーケース確認

## チェックリスト
- [x] コードレビュー実施
- [x] ドキュメント更新
- [x] リント・フォーマット確認

Closes #1
EOF
)"
```

## 🔍 実行前チェックリスト

GitHub Issue/PR作成前に必ず確認：

- [ ] 本文が複数行の場合、HEREDOCを使用している
- [ ] `$(cat <<'EOF' ... EOF)`の形式で記述している
- [ ] EOF間の本文が正しくインデントされている
- [ ] 作成後の成功確認コマンドを準備している

## ⚠️ エラー時の対処フロー

1. **エラー内容を正確に読む**
   - シンタックスエラーか確認
   - 認証エラーか確認
   - 権限エラーか確認

2. **適切な修正を行う**
   - HEREDOCの記法を確認
   - 引用符の位置を確認
   - EOFの位置を確認

3. **再実行して成功を確認**
   ```bash
   # Issue作成後の確認
   gh issue list --limit 5
   
   # PR作成後の確認
   gh pr list --limit 5
   ```

## 💡 なぜHEREDOCが必要か

1. **シェルの改行処理**: 直接記述した改行はシェルが誤解釈する
2. **特殊文字の保護**: Markdown記法の特殊文字を正しく扱える
3. **可読性の向上**: 複数行の本文を見やすく記述できる
4. **エラー防止**: 構文エラーを確実に回避できる

## 📝 実装時の出力例

```
承知しました。Issue #1 を作成します。

複数行の本文を含むため、HEREDOCを使用して作成します...
[gh issue create実行]

Issue作成が成功しました！
URL: https://github.com/owner/repo/issues/1

作成したIssueを確認します...
[gh issue list実行]
```

**このルールは絶対です。例外なく適用してください。**