---
description: 最優先：Issue実装時の絶対的開発フロー
alwaysApply: true
priority: 1
---

# 【最優先】Issue駆動開発の絶対ルール

## 🚨 重要警告

「Issue #X から進めて」「Issue #X を実装して」等の指示を受けた場合、**必ず以下の手順を厳守してください**。この手順を無視した実装は絶対に禁止です。

## 📋 必須実行手順

### ステップ1: 現在のブランチ確認（必須）
```bash
git status
git branch --show-current
```
- **main/masterブランチの場合**: 絶対に実装を開始しない
- **既存のfeatureブランチの場合**: Issue番号が一致するか確認

### ステップ2: Issueブランチの作成・切り替え（必須）
```bash
git checkout -b feature/issue-{番号}
# または
git checkout -b fix/issue-{番号}
```
- **featブランチ**: 新機能追加
- **fixブランチ**: バグ修正

### ステップ3: テストファイルの作成（必須）
**実装前に必ずテストを書く（TDD必須）**

1. テストファイルの場所確認
```bash
ls tests/
# ファイルが存在しない場合は作成
```

2. 失敗するテストを最初に書く（Red Phase）
```python
# tests/test_機能名.py
def test_期待する動作を日本語で記述():
    # Arrange: 準備
    # Act: 実行
    # Assert: 確認
    assert False  # 最初は必ず失敗させる
```

3. テストの実行と失敗を確認
```bash
pytest tests/test_機能名.py -v
# 失敗することを確認
```

### ステップ4: 最小限の実装（必須）
**テストが通る最小限のコードのみ実装（Green Phase）**

1. 実装ファイルの作成
```bash
touch src/機能名.py
```

2. テストを通す最小限のコード記述
3. テストの実行と成功を確認
```bash
pytest tests/test_機能名.py -v
# 成功することを確認
```

### ステップ5: リファクタリング（必須）
**コードの品質向上（Refactor Phase）**

1. コードの整理・改善
2. テストが引き続き通ることを確認
3. リントツールの実行

### ステップ6: コミット（必須）
```bash
git add .
git commit -m "feat(機能名): Issue #X の実装

- TDDで実装
- [具体的な変更内容]

Refs #X"
```

## 🚫 絶対的禁止事項

### 以下の行動は厳格に禁止
1. **mainブランチでの直接実装**
2. **テスト未作成での実装開始**
3. **ブランチ未作成での作業**
4. **TDDサイクルの省略**
5. **一度に複数Issueの実装**

### 違反時の対処
違反を検知した場合：
1. **即座に作業を停止**
2. **「申し訳ございません。正しい開発フローに従って再実行します」と謝罪**
3. **ステップ1から正しく実行**

## 🔍 実装前チェックリスト

「Issue #X から進めて」の指示を受けたら、以下を必ず確認：

- [ ] 現在のブランチはmain/masterではない
- [ ] feature/issue-X ブランチを作成済み
- [ ] テストファイルを先に作成する計画がある
- [ ] TDD（Red→Green→Refactor）の理解
- [ ] 1つのIssueに集中する準備

## 📝 実装時の出力例

```
承知しました。Issue #1 の実装を開始します。

まず現在のブランチを確認します...
[git status実行]

feature/issue-1 ブランチを作成して切り替えます...
[git checkout -b feature/issue-1]

TDDに従って、最初にテストを作成します...
[テストファイル作成]

失敗するテストを実行して、Redフェーズを確認します...
[pytest実行]

次に、テストを通す最小限の実装を行います...
```

## 💡 なぜこの手順が重要か

1. **品質保証**: TDDによりバグの少ないコード
2. **追跡可能性**: Issue番号とブランチの紐付け
3. **チーム開発**: 一貫した開発フローの維持
4. **学習効果**: 初心者にも正しい開発習慣

**このルールは他のすべてのルールより優先されます。**