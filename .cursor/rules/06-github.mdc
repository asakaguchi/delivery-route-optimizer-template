---
description: GitHub運用ガイド
globs: ".github/**/*", "*.md"
alwaysApply: false
---

# GitHub運用ガイド

## 🚀 重要：gh CLIの積極的使用

**GitHub Issue作成やPR作成の依頼には、gh CLIを積極的に使用してください。**
詳細は `02-github-operations.mdc` を参照してください。

### gh CLI基本コマンド
```bash
# Issue作成（積極的に実行）
gh issue create --title "タイトル" --body "本文" --label "enhancement"

# Issue一覧
gh issue list

# PR作成（積極的に実行）
gh pr create --title "タイトル" --body "本文"
```

### 注意事項
- **過度な権限チェックは不要**: 認証エラーが出たら対処するスタンス
- **即座の実行**: 「権限があるかわからない」等の理由での拒否は避ける
- **エラー時の対処**: 具体的な解決策を提示してリトライ

## Issue管理

### タイトル形式
```
[種別] 内容
```

例：
- `[feat] 配送先のCSV読み込み機能`
- `[fix] 地図表示のバグ修正`
- `[docs] READMEの更新`

### 利用可能なラベル
**🚨 重要：存在するラベルのみを使用してください**

- `enhancement`: 新機能
- `bug`: バグ
- `documentation`: ドキュメント  
- `good first issue`: 初心者向け
- `help wanted`: ヘルプ募集
- `question`: 質問・情報要求
- `duplicate`: 重複
- `invalid`: 無効
- `wontfix`: 対応予定なし

### ラベル使用方法
```bash
# 単一ラベル
gh issue create --title "タイトル" --body "本文" --label "enhancement"

# 複数ラベル  
gh issue create --title "タイトル" --body "本文" --label "enhancement,documentation"

# ラベルなし（推奨：エラー回避）
gh issue create --title "タイトル" --body "本文"
```

### Issueテンプレート

```markdown
## 概要
[具体的な実装内容を1-2行で簡潔に記述]

## 背景・目的
[なぜこの機能/修正が必要か、ビジネス価値を説明]

## 完了条件（受け入れ条件）
- [ ] [具体的で検証可能な条件1]
- [ ] [具体的で検証可能な条件2]
- [ ] [具体的で検証可能な条件3]
- [ ] 全テストがパスする
- [ ] コードレビューが完了する
- [ ] ドキュメントが更新される（必要な場合）

## 技術的詳細
### 実装方針
- **実装場所**: `[ファイルパス]`
- **主要な関数/クラス**: `[具体的な名前]`
- **使用ライブラリ**: [ライブラリ名とバージョン]
- **外部依存**: [API、サービス等]

### 設計考慮事項
- **エラーハンドリング**: [例外処理方針]
- **パフォーマンス**: [性能要件・制約]
- **セキュリティ**: [セキュリティ考慮事項]
- **テスト戦略**: [テスト手法・カバレッジ]

### データ構造
```python
# 入力データ例
input_data = {
    "field1": "value1",
    "field2": 123
}

# 出力データ例  
output_data = {
    "result": "success",
    "data": [...]
}
```

## 関連Issue
- **依存**: #[Issue番号] - [このIssueを完了する前に必要]
- **ブロック**: #[Issue番号] - [このIssueが完了後に着手可能]
- **関連**: #[Issue番号] - [関連するが依存関係なし]

## 見積もり
- **工数**: [時間数または日数]
- **優先度**: [High/Medium/Low]
- **難易度**: [Easy/Medium/Hard]
- **ストーリーポイント**: [1/2/3/5/8/13]

## 参考情報
- [関連ドキュメント]
- [参考記事・リンク]
- [既存実装の参考箇所]
```

## Pull Request

### タイトル形式
```
種別: 内容 (#Issue番号)
```

例：`feat: 配送先のCSV読み込み機能を追加 (#1)`

### PRテンプレート

**🚨 重要：「Closes #X」だけのPRは絶対に作成しないでください。**
以下のテンプレートを必ず使用してください：

```markdown
## 概要
[このPRで何を実現したか、なぜ必要だったかを具体的に説明]

例：StreamlitアプリでCSVファイルをアップロードし、配送先データを読み込む機能を実装しました。

## 変更内容
[具体的な変更点をリストアップ]
- [実装した機能1]（例：file_uploaderウィジェットによるCSVアップロード機能）
- [実装した機能2]（例：pandas使用によるCSVデータ読み込み処理）
- [実装した機能3]（例：データ検証機能の追加）
- [その他の変更]（例：エラーハンドリングの強化）

## 技術的詳細
[技術的な実装内容、使用したライブラリ、設計判断の理由等]
- **使用技術**: [使用したライブラリ・フレームワーク]
- **実装方針**: [設計判断の理由]
- **影響範囲**: [変更による影響の説明]

## スクリーンショット
[UIの変更がある場合は必ず添付]
- 変更前: [スクリーンショット]
- 変更後: [スクリーンショット]

## テスト
[実施したテストの詳細]
- [x] ユニットテストを追加・実行（[テスト内容]）
- [x] 手動テストを実施（[テスト内容]）
- [x] エラーケースの動作確認（[テスト内容]）
- [x] 既存機能への影響確認（[テスト内容]）

## 動作確認
[実際の動作確認手順]
1. [確認手順1]
2. [確認手順2]
3. [確認手順3]

## チェックリスト
- [x] コードがプロジェクトのスタイルガイドに従っている
- [x] セルフレビューを実施した
- [x] 分かりにくい部分にコメントを追加した
- [x] 破壊的変更がない（ある場合は説明を追加）
- [x] ドキュメントを更新した（必要な場合）
- [x] 全てのテストがパスする
- [x] リント・フォーマットが通る

## 関連情報
[参考資料、関連Issue、参考記事等]
- 関連Issue: #[Issue番号]
- 参考記事: [URL]
- 関連PR: #[PR番号]

Closes #Issue番号
```

### gh CLIでのPR作成コマンド例

**HEREDOCを使用した詳細なPR作成：**
```bash
gh pr create --title "feat: 配送先のCSV読み込み機能を追加 (#1)" --body "$(cat <<'EOF'
## 概要
StreamlitアプリでCSVファイルをアップロードし、配送先データを読み込む機能を実装しました。

## 変更内容
- file_uploaderウィジェットによるCSVアップロード機能
- pandas使用によるCSVデータ読み込み処理
- データ検証機能（必須カラムの確認）
- エラーハンドリング（不正フォーマット対応）
- アップロード後のプレビュー表示機能

## 技術的詳細
- **使用技術**: Streamlit st.file_uploader, pandas, numpy
- **実装方針**: CSVファイルの読み込み後、必須カラムの存在確認とデータ型チェックを実施
- **影響範囲**: 既存のマニュアル入力機能はそのまま維持、新たな入力手段として追加

## テスト
- [x] ユニットテストを追加・実行（CSVパーサーとデータ検証機能）
- [x] 手動テストを実施（正常なCSVファイルのアップロード）
- [x] エラーケースの動作確認（不正フォーマット、欠損値含むCSV）
- [x] 既存機能への影響確認（マニュアル入力機能が正常動作）

## チェックリスト
- [x] コードがプロジェクトのスタイルガイドに従っている
- [x] セルフレビューを実施した
- [x] 分かりにくい部分にコメントを追加した
- [x] 破壊的変更がない
- [x] ドキュメントを更新した

Closes #1
EOF
)"
```

**コマンド構築の基本形：**
```bash
gh pr create --title "種別: 内容 (#Issue番号)" --body "$(cat <<'EOF'
## 概要
[具体的な概要]

## 変更内容
- [変更1]
- [変更2]
- [変更3]

## テスト
- [x] [テスト内容1]
- [x] [テスト内容2]

## チェックリスト
- [x] [チェック項目1]
- [x] [チェック項目2]

Closes #Issue番号
EOF
)"
```

### 実際のPR作成例

#### 良いPR例
```markdown
## 概要
StreamlitアプリでCSVファイルをアップロードし、配送先データを読み込む機能を実装しました。ユーザーが手動でデータを入力する手間を削減し、既存のCSVファイルから効率的にデータを取り込めるようになります。

## 変更内容
- file_uploaderウィジェットによるCSVアップロード機能
- pandas使用によるCSVデータ読み込み処理
- データ検証機能（必須カラム：住所、緯度、経度の確認）
- エラーハンドリング（不正フォーマット、欠損値対応）
- アップロード後のプレビュー表示機能
- CSVテンプレートダウンロード機能

## 技術的詳細
- **使用技術**: Streamlit st.file_uploader, pandas, numpy
- **実装方針**: CSVファイルの読み込み後、必須カラムの存在確認とデータ型チェックを実施
- **影響範囲**: 既存のマニュアル入力機能はそのまま維持、新たな入力手段として追加

## スクリーンショット
- 変更前: [手動入力画面のスクリーンショット]
- 変更後: [CSVアップロード画面とプレビュー画面のスクリーンショット]

## テスト
- [x] ユニットテストを追加・実行（CSVパーサーとデータ検証機能）
- [x] 手動テストを実施（正常なCSVファイルのアップロード）
- [x] エラーケースの動作確認（不正フォーマット、欠損値含むCSV）
- [x] 既存機能への影響確認（マニュアル入力機能が正常動作）

## 動作確認
1. サンプルCSVファイルをアップロード
2. プレビュー表示で内容確認
3. データ適用ボタンでアプリに反映
4. 地図表示でマーカーが正しく表示されることを確認

## チェックリスト
- [x] コードがプロジェクトのスタイルガイドに従っている
- [x] セルフレビューを実施した
- [x] 分かりにくい部分にコメントを追加した
- [x] 破壊的変更がない
- [x] ドキュメントを更新した（README.mdにCSVフォーマット情報を追加）
- [x] 全てのテストがパスする
- [x] リント・フォーマットが通る

## 関連情報
- 関連Issue: #1
- 参考記事: https://docs.streamlit.io/library/api-reference/widgets/st.file_uploader
- CSVサンプル: docs/sample_locations.csv

Closes #1
```

## ブランチ戦略
- `main`: 本番環境用
- `develop`: 開発用
- `feature/issue-番号`: 機能開発用
- `fix/issue-番号`: バグ修正用
```

