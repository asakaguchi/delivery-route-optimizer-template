---
description: 開発ワークフローガイド
alwaysApply: true
---

# 開発ワークフローガイド

## ⚠️ 重要：Issue実装の絶対ルール

**「Issue #X から進めて」の指示には必ず `01-issue-driven-development.mdc` に従ってください。**

## GitHub Issue駆動開発

### 🔒 強制フロー（必須）
1. **Issue選択**: 優先度とブロッカーを考慮して1つのIssueを選択
2. **ブランチ確認・作成**: 
   - `git status` で現在のブランチを必ず確認
   - mainブランチでの作業は絶対禁止
   - `feature/issue-番号` または `fix/issue-番号` を作成
3. **TDD実装**: 
   - テストファーストは必須（実装前にテスト作成）
   - Red→Green→Refactorサイクルを厳守
4. **コミット**: Conventional Commits形式で頻繁にコミット
5. **PR作成**: Issue番号を含むPRを作成
6. **マージ**: レビュー完了後、Issueクローズ

### 🚫 禁止事項
- mainブランチでの直接実装
- テスト未作成での実装
- 複数Issueの同時実装

### Issue作成時の注意点
- 09-task-decomposition.mdc の手法に従う
- 完了条件を明確に定義
- 依存関係を「関連Issue」セクションで明示
- 技術的詳細を充実させる

## コミットメッセージ規約

### 形式
```
<type>(<scope>): <subject>

<body>

<footer>
```

### タイプ
- **feat**: 新機能追加
- **fix**: バグ修正
- **test**: テスト追加・修正
- **docs**: ドキュメント更新
- **refactor**: リファクタリング
- **style**: コードスタイル修正
- **chore**: ビルド設定等

### 例
```
feat(csv): 配送先のCSV読み込み機能を追加

- pandasを使用してCSVファイルを読み込み
- データ検証機能を実装
- エラーハンドリングを追加

Closes #1
```

## 品質管理

### 実装前チェックリスト
- [ ] Issueの完了条件を理解
- [ ] 依存Issueが完了している
- [ ] 技術的アプローチが明確

### 実装後チェックリスト
- [ ] 全テストがパス
- [ ] リント・フォーマットが通る
- [ ] 完了条件を満たしている
- [ ] 適切なコミットメッセージ

