---
description: 要求仕様からGitHub Issue作成のためのタスク分解手法
alwaysApply: true
---

# タスク分解からGitHub Issue作成ガイド

## 基本原則

### 1. 機能ベースの分解
要求仕様の各機能を独立したIssueに分解する際の指針：

```
機能要件 → 複数のIssue
├── UI層の実装
├── ロジック層の実装  
├── データ層の実装
├── テスト実装
└── ドキュメント更新
```

### 2. 実装レイヤー別分解
各機能を以下のレイヤーに分けて考える：

- **Frontend**: UI/UX、ユーザー操作
- **Backend**: ビジネスロジック、データ処理
- **Infrastructure**: ファイル操作、外部API連携
- **Testing**: ユニットテスト、統合テスト
- **Documentation**: README、API仕様

### 3. Issue作成の具体的手法

#### ステップ1: 機能の特定
```
例: "CSV取り込み機能"
↓
以下のIssueに分解:
- CSV読み込みUIの実装
- CSVデータ検証ロジック
- エラーハンドリング
- CSVパーサーのテスト
```

#### ステップ2: Issue詳細の定義
各Issueに以下を含める：

```markdown
## 概要
[具体的な実装内容]

## 背景・目的
[なぜこの実装が必要か]

## 完了条件（受け入れ条件）
- [ ] 具体的で検証可能な条件1
- [ ] 具体的で検証可能な条件2
- [ ] テストがパスする
- [ ] コードレビューが完了する

## 技術的詳細
### 実装方針
- 使用するライブラリ: [具体的なライブラリ名]
- 実装場所: [ファイルパス]
- 主要な関数/クラス: [具体的な名前]

### 設計考慮事項
- エラーハンドリング方針
- パフォーマンス要件
- セキュリティ考慮事項

## 関連Issue
- 依存: #[Issue番号] (このIssueを完了する前に必要)
- ブロック: #[Issue番号] (このIssueが完了後に着手可能)
- 関連: #[Issue番号] (関連するが依存関係なし)

## 見積もり
- 工数: [時間または日数]
- 優先度: [High/Medium/Low]
- 難易度: [Easy/Medium/Hard]
```

## 実践例: CSV取り込み機能

### 元の要求仕様
```
CSV取り込み機能
- 配送先情報（名前、住所、緯度、経度）を含むCSVファイルをアップロード
- データの検証とエラー表示
```

### 分解後のIssue群

#### Issue 1: CSVアップロードUIの実装
```markdown
## 概要
Streamlitを使用してCSVファイルアップロード機能を実装

## 完了条件
- [ ] file_uploaderウィジェットが正常に動作する
- [ ] CSVファイルのみアップロード可能
- [ ] ファイルサイズ制限（10MB）が適用される
- [ ] アップロード後にプレビューが表示される

## 技術的詳細
- 実装場所: `src/ui/components/csv_uploader.py`
- 使用ライブラリ: streamlit, pandas
```

#### Issue 2: CSVデータ検証ロジックの実装
```markdown
## 概要
アップロードされたCSVデータの妥当性を検証する機能

## 完了条件
- [ ] 必須カラム（name, address, lat, lon）の存在確認
- [ ] 緯度・経度の数値範囲チェック
- [ ] 重複データの検出
- [ ] エラー詳細の日本語メッセージ

## 技術的詳細
- 実装場所: `src/validators/csv_validator.py`
- 使用ライブラリ: pandas, pydantic
```

#### Issue 3: エラーハンドリングとユーザーフィードバック
```markdown
## 概要
CSVアップロード時のエラーハンドリングとユーザーへの適切なフィードバック

## 完了条件
- [ ] エラー発生時の適切なメッセージ表示
- [ ] 警告レベルの区別（エラー/警告/情報）
- [ ] エラー箇所の特定（行数、カラム名）
- [ ] 修正方法の提案

## 関連Issue
- 依存: #2 (CSV検証ロジック)
```

## タスク分解時の注意点

### 1. 依存関係の明確化
```
A → B → C の順序で実装が必要な場合
- Issue A: 依存なし
- Issue B: 依存: #A
- Issue C: 依存: #B
```

### 2. 適切な粒度の維持
- 30分〜2時間で完了可能なサイズ
- 独立してテスト可能
- 他の開発者が理解しやすい

### 3. 完了条件の具体化
```
悪い例: "CSVファイルが読み込めること"
良い例: "10MB以下のCSVファイルをアップロードし、必須カラムが存在する場合に、pandasのDataFrameとして正常に読み込まれること"
```

### 4. 技術的詳細の充実
- 実装場所の明示
- 使用ライブラリの指定
- 設計パターンの説明
- パフォーマンス要件

## Issue作成の自動化

AIに依頼する際の効果的なプロンプト例：

```
以下の要求仕様を、GitHub Issueとして登録可能な形式に分解してください。
各IssueにはJavaScriptオブジェクト形式で以下の情報を含めてください：

{
  "title": "[種別] 具体的なタイトル",
  "body": "## 概要\n[詳細]...",
  "labels": ["enhancement", "priority-high"],
  "assignees": [],
  "milestone": null
}

要求仕様：
[仕様内容をペースト]
```

この手法により、単純なチェックリストではなく、実装可能な具体的なGitHub Issueとして機能する分解が可能になります。